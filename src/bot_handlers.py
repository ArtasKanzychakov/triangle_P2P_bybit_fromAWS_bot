# src/bot_handlers.py
from telegram import Update
from telegram.ext import ContextTypes
from functools import wraps

# –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from src.config import ADMIN_CHAT_ID, logger
from src.bybit_client import bybit_client
from src.arbitrage_finder import ArbitrageFinder

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ArbitrageFinder
finder = ArbitrageFinder(bybit_client)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id != ADMIN_CHAT_ID:
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_name = update.effective_user.first_name
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è –±–∏—Ä–∂–∏ Bybit. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/set_amount <—Å—É–º–º–∞> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/start_arb - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/stop_arb - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"
    )
    await update.message.reply_text(message, parse_mode='Markdown')
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not finder.all_pairs:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–∞—Ö Bybit, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É...")
        if finder.load_market_data():
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    job_name = "arbitrage_check_job"
    current_jobs = context.job_queue.get_jobs_by_name(job_name)
    status = "‚úÖ –ó–∞–ø—É—â–µ–Ω" if current_jobs else "‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    balance = bybit_client.get_usdt_balance()
    balance_str = f"{balance:.2f} USDT" if balance is not None else "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"

    message = (
        f"**üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\n"
        f"**–°—Ç–∞—Ç—É—Å —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {status}\n"
        f"**–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ø–∞—Ä:** {len(finder.all_pairs)}\n"
        f"**–ù–∞–π–¥–µ–Ω–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫:** {len(finder.triangular_chains)}\n"
        f"**–°—É–º–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:** {finder.start_amount} USDT\n"
        f"**–ë–∞–ª–∞–Ω—Å –Ω–∞ Bybit:** {balance_str}"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

@admin_only
async def set_amount_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤."""
    try:
        amount = float(context.args[0])
        if amount <= 0:
            raise ValueError
        finder.start_amount = amount
        await update.message.reply_text(f"‚úÖ –°—É–º–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {amount} USDT")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_amount 100")

@admin_only
async def start_arb_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞."""
    job_name = "arbitrage_check_job"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if context.job_queue.get_jobs_by_name(job_name):
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    context.job_queue.run_repeating(
        finder.check_arbitrage_opportunities,
        interval=5,
        first=1,
        name=job_name
    )
    logger.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–ø—É—â–µ–Ω.")
    await update.message.reply_text("‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–ø—É—â–µ–Ω.")

@admin_only
async def stop_arb_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    job_name = "arbitrage_check_job"
    current_jobs = context.job_queue.get_jobs_by_name(job_name)
    if not current_jobs:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")
        return

    for job in current_jobs:
        job.schedule_removal()
    
    logger.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await update.message.reply_text("‚õîÔ∏è –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
