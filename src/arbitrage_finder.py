# src/arbitrage_finder.py
import time
from itertools import combinations
from .config import logger, ADMIN_CHAT_ID

class ArbitrageFinder:
    def __init__(self, bybit_client):
        self.bybit_client = bybit_client
        self.instruments_info = {}  # {'BTCUSDT': {'minOrderQty': '0.0001', ...}}
        self.all_pairs = []         # ['BTCUSDT', 'ETHUSDT', ...]
        self.triangular_chains = [] # [['USDT', 'BTC', 'ETH'], ...]
        self.tickers = {}           # {'BTCUSDT': {'ask1Price': '...', 'bid1Price': '...'}}
        self.start_amount = 100.0   # –°—É–º–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.min_profit_percent = 0.5 # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    def load_market_data(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å –±–∏—Ä–∂–∏ –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏ –∏—Ö –ø—Ä–∞–≤–∏–ª–∞, –∑–∞—Ç–µ–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏.
        """
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–∞—Ö...")
        instruments = self.bybit_client.get_spot_instruments()
        if not instruments:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å Bybit. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ API –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            return False

        unique_currencies = set()
        for instrument in instruments:
            if instrument['status'] == 'Trading':
                symbol = instrument['symbol']
                base_coin = instrument['baseCoin']
                quote_coin = instrument['quoteCoin']
                
                self.all_pairs.append(symbol)
                unique_currencies.add(base_coin)
                unique_currencies.add(quote_coin)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ minOrderQty
                self.instruments_info[symbol] = {
                    'minOrderQty': instrument['lotSizeFilter']['minOrderQty'],
                    'baseCoin': base_coin,
                    'quoteCoin': quote_coin
                }
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.all_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä.")
        logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫...")
        self._form_triangular_chains(list(unique_currencies))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(self.triangular_chains)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫.")
        return True

    def _form_triangular_chains(self, currencies):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç.
        –ü—Ä–∏–º–µ—Ä: [USDT, BTC, ETH]
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ 3 –≤–∞–ª—é—Ç
        for combo in combinations(currencies, 3):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö "–Ω–æ–≥" —Ü–µ–ø–æ—á–∫–∏
            c1, c2, c3 = combo[0], combo[1], combo[2]
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: c1 -> c2 -> c3 -> c1
            if f"{c2}{c1}" in self.all_pairs and f"{c3}{c2}" in self.all_pairs and f"{c3}{c1}" in self.all_pairs:
                self.triangular_chains.append([c1, c2, c3, 'reverse']) # c3/c1 - –æ–±—Ä–∞—Ç–Ω–∞—è –ø–∞—Ä–∞
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: c1 -> c3 -> c2 -> c1
            if f"{c3}{c1}" in self.all_pairs and f"{c2}{c3}" in self.all_pairs and f"{c2}{c1}" in self.all_pairs:
                self.triangular_chains.append([c1, c3, c2, 'reverse']) # c2/c1 - –æ–±—Ä–∞—Ç–Ω–∞—è –ø–∞—Ä–∞

            # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö 6 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ä–µ–∞–ª–∏–∑—É–µ–º 2 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö)
            # –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å–µ 6 –ø—É—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–æ–π–∫–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, c1/c2, c2/c3, c1/c3
            if f"{c2}{c1}" not in self.all_pairs and f"{c1}{c2}" in self.all_pairs: c2, c1 = c1, c2 # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
            
            pair1 = f"{c2}{c1}"
            pair2_1, pair2_2 = f"{c3}{c2}", f"{c2}{c3}"
            pair3_1, pair3_2 = f"{c3}{c1}", f"{c1}{c3}"

            if pair1 in self.all_pairs:
                if pair2_1 in self.all_pairs and pair3_1 in self.all_pairs:
                    self.triangular_chains.append([c1, c2, c3])
                if pair2_2 in self.all_pairs and pair3_2 in self.all_pairs:
                    self.triangular_chains.append([c1, c3, c2])


    async def check_arbitrage_opportunities(self, context):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            self.tickers = self.bybit_client.get_tickers(self.all_pairs)
            if not self.tickers:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã (—Ç–∏–∫–µ—Ä—ã). –ü—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞.")
                return

            # 2. –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ü–µ–ø–æ—á–∫–∞–º
            for chain in self.triangular_chains:
                await self._check_single_chain(context, chain)
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    async def _check_single_chain(self, context, chain):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Ü–µ–ø–æ—á–∫—É.
        """
        # –ü—Ä–∏–º–µ—Ä —Ü–µ–ø–æ—á–∫–∏: [USDT, BTC, ETH]
        # 1. USDT -> BTC (–ø–æ–∫—É–ø–∫–∞ BTC –∑–∞ USDT, –ø–∞—Ä–∞ BTCUSDT)
        # 2. BTC -> ETH (–ø–æ–∫—É–ø–∫–∞ ETH –∑–∞ BTC, –ø–∞—Ä–∞ ETHBTC)
        # 3. ETH -> USDT (–ø—Ä–æ–¥–∞–∂–∞ ETH –∑–∞ USDT, –ø–∞—Ä–∞ ETHUSDT)
        
        c1, c2, c3 = chain[0], chain[1], chain[2]

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            pair1, leg1_is_reversed = self._get_pair_info(c1, c2)
            pair2, leg2_is_reversed = self._get_pair_info(c2, c3)
            pair3, leg3_is_reversed = self._get_pair_info(c3, c1)

            if not all([pair1, pair2, pair3]): return # –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã Ask/Bid –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            price1 = float(self.tickers[pair1]['ask1Price']) if not leg1_is_reversed else 1 / float(self.tickers[pair1]['bid1Price'])
            price2 = float(self.tickers[pair2]['ask1Price']) if not leg2_is_reversed else 1 / float(self.tickers[pair2]['bid1Price'])
            price3 = float(self.tickers[pair3]['bid1Price']) if not leg3_is_reversed else 1 / float(self.tickers[pair3]['ask1Price'])
            
            # --- –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ ---
            amount_c2 = self.start_amount / price1
            amount_c3 = amount_c2 / price2
            final_amount = amount_c3 * price3

            profit = final_amount - self.start_amount
            profit_percent = (profit / self.start_amount) * 100

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç ---
            if profit_percent > self.min_profit_percent:
                
                # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤ ---
                # leg1: –ü–æ–∫—É–ø–∞–µ–º amount_c2 (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
                qty1 = amount_c2 if not leg1_is_reversed else self.start_amount
                min_qty1 = float(self.instruments_info[pair1]['minOrderQty'])
                
                # leg2: –ü–æ–∫—É–ø–∞–µ–º amount_c3 (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
                qty2 = amount_c3 if not leg2_is_reversed else amount_c2
                min_qty2 = float(self.instruments_info[pair2]['minOrderQty'])

                # leg3: –ü—Ä–æ–¥–∞–µ–º amount_c3 (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
                qty3 = amount_c3 if not leg3_is_reversed else final_amount
                min_qty3 = float(self.instruments_info[pair3]['minOrderQty'])

                if qty1 < min_qty1 or qty2 < min_qty2 or qty3 < min_qty3:
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å–ø—Ä–µ–¥ {profit_percent:.4f}% –≤ {chain}, –Ω–æ –æ–±—ä–µ–º –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞.")
                    return
                
                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = (
                    f"üöÄ **–ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!**\n\n"
                    f"**–¶–µ–ø–æ—á–∫–∞:** `{c1} ‚Üí {c2} ‚Üí {c3} ‚Üí {c1}`\n"
                    f"**–ü—Ä–æ—Ñ–∏—Ç:** `{profit:.4f} {c1}` ({profit_percent:.4f}%)\n"
                    f"**–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—É–º–º–∞:** `{self.start_amount} {c1}`\n\n"
                    f"**–®–∞–≥ 1 ({pair1}):** –ö—É–ø–∏—Ç—å `{c2}` –∑–∞ `{c1}`\n"
                    f"**–®–∞–≥ 2 ({pair2}):** –ö—É–ø–∏—Ç—å `{c3}` –∑–∞ `{c2}`\n"
                    f"**–®–∞–≥ 3 ({pair3}):** –ü—Ä–æ–¥–∞—Ç—å `{c3}` –∑–∞ `{c1}`\n\n"
                    f"**–û–±—ä–µ–º—ã (Qty > MinQty):**\n"
                    f"1. `{qty1:.6f}` > `{min_qty1}`\n"
                    f"2. `{qty2:.6f}` > `{min_qty2}`\n"
                    f"3. `{qty3:.6f}` > `{min_qty3}`"
                )
                await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, parse_mode='Markdown')

        except (KeyError, ZeroDivisionError, TypeError) as e:
            # –≠—Ç–∏ –æ—à–∏–±–∫–∏ –æ–∂–∏–¥–∞–µ–º—ã, –µ—Å–ª–∏ —Ç–∏–∫–µ—Ä –¥–ª—è –ø–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ø–æ—á–∫–∏ {chain}: {e}")
            
    def _get_pair_info(self, c_from, c_to):
        """ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∞—Ä—ã –∏ –µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è """
        if f"{c_to}{c_from}" in self.all_pairs:
            return f"{c_to}{c_from}", False # –ü—Ä—è–º–∞—è –ø–∞—Ä–∞ (e.g., BTC/USDT)
        elif f"{c_from}{c_to}" in self.all_pairs:
            return f"{c_from}{c_to}", True # –û–±—Ä–∞—Ç–Ω–∞—è –ø–∞—Ä–∞ (e.g., USDT/BTC)
        else:
            return None, None
